generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  ADMIN
  DEVELOPER
  SUPPORTER
  BETA
  USER
}

model Device {
  id          String   @id @default(uuid()) @map("_id")
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  userAgent   String
  ipAddress   String
  fingerprint String?
  lastOnline  DateTime @default(now())
}

model User {
  id                 String              @id @default(uuid()) @map("_id")
  email              String              @unique
  passwordHash       String?
  ip                 String
  createdAt          DateTime            @default(now())
  lastLogin          DateTime?
  firstLogin         DateTime?
  role               UserRole            @default(USER)
  isTwoFactorEnabled Boolean             @default(false)
  twoFactorSecret    String?
  isBanned           Boolean             @default(false)
  isVerified         Boolean             @default(false)
  username           String              @unique
  nickname           String?
  avatar             String?
  bio                String?
  urls               String[]
  referralCode       String              @unique
  referredBy         String?             @db.String
  referrals          Referral[]          @relation("ReferrerRelation")
  referredUsers      Referral[]          @relation("ReferredUserRelation")
  RegisterKeys       RegisterKeys[]
  SsoToken           SsoToken[]
  Device             Device[]
  PasswordResetCode  PasswordResetCode[]
  friendRequests     Friendship[]        @relation("FriendshipRequest")
  friendReceives     Friendship[]        @relation("FriendshipReceive")
  UserSettings       UserSettings?
}

model UserSettings {
  id                 String   @id @default(uuid()) @map("_id")
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id])
  emailNotifications Boolean  @default(true)
  marketingEmails    Boolean  @default(false)
  securityEmails     Boolean  @default(true)
  appNotifications   Boolean  @default(true)
  darkMode           Boolean  @default(false)
  language           String   @default("en")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model PasswordResetCode {
  code      String   @id @map("_id")
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
}

model RegisterKeys {
  id        String   @id @default(uuid()) @map("_id")
  key       String   @unique
  ip        String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model SsoToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Referral {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  referrerId     String   @db.String
  referredUserId String   @db.String
  createdAt      DateTime @default(now())
  referrer       User     @relation("ReferrerRelation", fields: [referrerId], references: [id])
  referredUser   User     @relation("ReferredUserRelation", fields: [referredUserId], references: [id])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Friendship {
  id          String           @id @default(uuid()) @map("_id")
  requesterId String
  receiverId  String
  status      FriendshipStatus
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  requester   User             @relation("FriendshipRequest", fields: [requesterId], references: [id])
  receiver    User             @relation("FriendshipReceive", fields: [receiverId], references: [id])
}
